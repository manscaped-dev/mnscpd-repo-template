# Author: Philip De Lorenzo <phil.delorenzo@manscaped.com>
# Date: 2025-03-01
name: SRE Release Promotion
run-name: Release Promotion --> ${{ inputs.staging == true && 'Staging' || inputs.production == true && 'Production' || 'None' }}

on:
  workflow_dispatch:
    inputs:
      staging:
        description: 'Promote Draft Release to Staging'
        type: boolean
        default: false
    
      production:
        description: 'Promote Pre-Release to Production'
        type: boolean
        default: false

      deploy:
        description: 'Deploy to GCR'
        type: boolean
        default: false

permissions:
  contents: write

env:
  IMAGE_NAME: manscaped-sre-docs

jobs:
  pre-promotion:
    name: Pre-Promotion Checks
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.SRE_GITHUB_ACCESS_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.SRE_GITHUB_ACCESS_TOKEN }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: gh CLI Test
      run: |
        echo "[INFO] - Testing the gh CLI..."
        gh --version
        echo "[INFO] - Testing the gh CLI authentication..."
        gh auth status

    - name: Registry Check
      id: check_registry
      run: |
        echo "[INFO] - Checking to Ensure Registry type..."
        if [[ ! -f "${{ github.workspace }}/mando.json" ]] && [[ ! -f "${{ github.workspace }}/pyproject.toml" ]] && [[ ! -f "${{ github.workspace }}/package.json" ]]; then
          echo "[ERROR] - No versioning file found. Please check your repository."
          exit 1
        fi

    - name: Ensure Main Branch
      run: |
        if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "[ERROR] - This action can ONLY be run from the main branch."
            echo "[INFO] - Continuing with the actions for testing..."
            exit 1
        fi

    - name: Prerequisites (Staging)
      if: ${{ inputs.staging == true }}
      run: |
        # To run the promotion to staging, there needs to be a draft-release to promote to a pre-release
        draft_count=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == true)' | wc -l | xargs)
        if [[ ${draft_count} -eq 0 ]] || [[ -z ${draft_count} ]] || [[ ${draft_count} == "null" ]]; then
            echo "[ERROR] - To promote to staging, you must have a draft release."
            exit 1
        fi

    - name: Prerequisites (Production)
      if: ${{ inputs.production == true }}
      run: |
          # To run the promotion to production, there needs to be a pre-release from the draft release
          prerelease_count=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.prerelease == true)' | wc -l)
          if [[ $prerelease_count -eq 0 ]]; then
              echo "[ERROR] - To promote to production, you must have a pre-release already in place - Please promote to staging first."
              exit 1
          fi

  promotion:
    name: Promote Environment
    runs-on: ubuntu-latest
    needs: [pre-promotion]
    env:
      GH_TOKEN: ${{ secrets.SRE_GITHUB_ACCESS_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.SRE_GITHUB_ACCESS_TOKEN }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Latest Release Tag
      id: release
      run: |
        echo "[INFO] - Fetching the latest release tag -- $(gh api repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')"
        export _latest_tag="$(gh api repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')"
        echo "latest_tag=${_latest_tag}" >> $GITHUB_OUTPUT
        if [[ -z "${_latest_tag}" ]] || [[ "${_latest_tag}" == "" ]] || [[ "${_latest_tag}" == "null" ]]; then
          echo "[WARNING] - No latest release tag found."
          echo "latest_tag_commit=''" >> $GITHUB_OUTPUT
        else
          echo "latest_tag_commit=$(gh api repos/${{ github.repository }}/git/ref/tags/${_latest_tag} --jq '.object.sha')" >> $GITHUB_OUTPUT
        fi

    # This step should call the sre-auto-entrypoint.yml workflow_call
    - name: Promote to Staging
      if: ${{ inputs.staging == true }}
      run: |
        echo "[INFO] - Promoting to Staging - the prerequisities have been met."
        echo "[INFO] - Latest Release: ${{ steps.release.outputs.latest_tag }}"
        echo "[INFO] - Latest Tag Commit: ${{ steps.release.outputs.latest_tag_commit }}"
        echo "[INFO] - Draft Release: $(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.published_at == null) | select(.draft == true) | select(.prerelease == false)')"
        echo "[INFO] - Commit branch: $(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.published_at == null) | select(.draft == true) | select(.prerelease == false) | .target_commitish')"
        commit_branch=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.published_at == null) | select(.draft == true) | select(.prerelease == false) | .target_commitish')
        echo ""
        echo "[INFO] - Changes to be made:"
        git fetch --all
        if [[ -z ${{ steps.release.outputs.latest_tag_commit }} ]] || [[ "${{ steps.release.outputs.latest_tag_commit }}" == '' ]]; then
          git diff --name-only origin/main
        else
          git diff --name-only ${{ steps.release.outputs.latest_tag_commit }}..origin/main
        fi

        echo "[INFO] - Running Python commands to promote the draft release to a pre-release..."
        pip install -r .github/workflows/python/requirements.txt

        echo "[INFO] - Running the promotion script..."
        python3 .github/workflows/python/promote.py --prerelease

    # This step should call the sre-auto-entrypoint.yml workflow_call
    - name: Promote to Production
      if: ${{ inputs.production == true }}
      run: |
        echo "[INFO] - Promoting to Production - the prerequisities have been met."
        echo "[INFO] - Pre-Release: $(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == false) | select(.prerelease == true)')"
        echo "[INFO] - Commit Branch: $(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == false) | select(.prerelease == true) | .target_commitish')"
        if [[ -z "${{ steps.release.outputs.latest_tag }}" ]] || [[ "${{ steps.release.outputs.latest_tag }}" == "" ]] || [[ "${{ steps.release.outputs.latest_tag }}" == "null" ]]; then
          git diff --name-only origin/main
        else
          git diff --name-only ${{ steps.release.outputs.latest_tag }}..$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == false) | select(.prerelease == true) | .target_commitish')
        fi

        echo "[INFO] - Running Python commands to promote the pre-release to the latest release..."
        pip install -r .github/workflows/python/requirements.txt

        echo "[INFO] - Running the promotion script..."
        python3 .github/workflows/python/promote.py --release
    
  deploy:
    name: Deploy to GCR
    if : ${{ inputs.deploy == true }}
    runs-on: ubuntu-latest
    needs: [promotion]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # NOTE: READ COMMENTS BELOW - NEEDS WORK
    - name: Authenticate to Google Cloud
      # NOTE: This step is only run if the promotion to production is successful
      # and the deploy input is set to true.

      # We want this to deploy to environments based on the environment it is building in.
      if: ${{ inputs.production == true }}
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.SRE_GCP_CREDENTIALS }}
        service_account: ${{ secrets.SRE_GCP_SERVICE_ACCOUNT}}

    - name: Deploy Tag
      # NOTE: This step is only run if the promotion to production is successful
      # and the deploy input is set to true.

      # We want this to deploy to environments based on the environment it is building in.
      if: ${{ inputs.production == true }}
      id: deploy_tag
      run: |
        echo "[INFO] - Deploying the tag to GCR..."
        echo "deploy_tag=$(gh api repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')" >> $GITHUB_OUTPUT

    - uses: RafikFarhad/push-to-gcr-github-action@v5-rc1
      # NOTE: This step is only run if the promotion to production is successful
      # and the deploy input is set to true.

      # We want this to deploy to environments based on the environment it is building in.
      if: ${{ inputs.production == true }}
      with:
        registry: ${{ vars.REGISTRY }}
        project_id: manscaped-sre
        image_name: ${{ vars.IMAGE_PREFIX }}/${{ env.IMAGE_NAME}}
        image_tag: "${{ steps.deploy_tag.outputs.deploy_tag }},latest"
        dockerfile: ${{ github.workspace }}/docker/sre-docs/Dockerfile
